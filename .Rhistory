bnlearn::score('[A][B][C][D][E][F]', learning.test, type = 'bic')
ms <- '[A][B][C][D][E][F]'
t.net <- bnlearn::model2network(ms)
bnlearn::score(t.net, learning.test, type = 'bic')
ms <- '[F]'
t.net <- bnlearn::model2network(ms)
bnlearn::score(t.net, learning.test, type = 'bic')
paste(c(), '[A]')
paste(c(), '[A]', sep = '')
paste(c(), '[v1]', sep = '')
list(FALSE, TRUE)
length(tl)
tl[[length(tl)]]
tv <- 1:3
for (i in 3:1) print(tv[i])
rm(i)
sum(TRUE, FALSE)
sum(TRUE, FALSE, TRUE)
intToBits(2)
!FALSE & !FALSE
tv
for (i in tv) print(i)
tv2 <- c('v1_t1', 'v2_t1', 'v3_t1')
for (i in tv2) print(i)
tv[tl]
tv[unlist(tl)]
tl
tl[[2]] <- TRUE
tv[unlist(tl)]
tv2[unlist(tl)]
tl[[1]]<- TRUE
tl[[3]]<- TRUE
tl[[2]]<- FALSE
tv2[unlist(tl)]
packrat::status()
packrat::status()
packrat::on()
tl
tv
tv2
tl2 <- tl
tl2[[tl2]] <- FALSE
tl2[[]] <- FALSE
tl2[[1, 3]] <- FALSE
tl2[[C(1,3)]] <- FALSE
tl2[[1]] <- FALSE
tl2[[3]] <- FALSE
TL2
tl2
tv2[unlist(tl)]
tv2[unlist(tl2)]
length(tv2[unlist(tl2)])
as.list(tv2[unlist(tl2)])
as.list(tv2[unlist(tl)])
as.list(tv2[unlist(tl2)])
length(as.list(tv2[unlist(tl2)]))
packrat::status()
library(bnlearn)
t.net
ms
rm(i)
ms <- '[A][B][C][D][E][F]'
ms <- '[A][B][C][D][E][F|A:B]'
t.net <- bnlearn::model2network(ms)
score(t.net, learning.test, type = 'bic')
str(learning.test)
sample(1:2, 16, replace = TRUE)
matrix(sample(1:2, 16, replace = TRUE), nrow = 4, ncol = 4)
t.data <- matrix(sample(1:2, 16, replace = TRUE), nrow = 4, ncol = 4)
colnames(t.data)[1:3] <- tv2
colnames(t.data) <- c(tv2, 'v1_t2')
t.data
str(t.data)
t.data2 <- as.data.frame(t.data)
str(t.data2)
t.data3 <- as.factor(t.data2)
str(t.data3)
t.data3 <- t.data2
for (i in 1:4) {
t.data3[, i] <- as.factor(t.data3[, i])
}
rm(i)
str(t.data2)
packrat::status()
t.data
str(t.data)
str(data.frame(t.data))
str(as.data.frame(t.data))
str(learning.test)
str(as.data.frame(as.table(t.data)))
dim(learning.test)
str(as.table(t.data))
as.factor(c(1,2,1))
t.data2
str(t.data2)
str(t.data3)
library(bnlearn)
ms
ms2 <- '[v1_t1][v2_t1][v3_t1][v1_t2][v1_t2]'
t.net2 <- bnlearn::model2network(ms2)
bnlearn::score(t.net2, t.data3, type = 'bic')
t.data3
t.data3[1, 1] <- 2
t.data3
t.data3[1, 1] <- factor(1)
t.data3
t.data3[1, 1] <- factor(2)
t.data2
t.data
t.data[1, 1] <- 2
t.data
t.data2 <- as.data.frame(t.data)
str(t.data2)
t.data3 <- as.factor(t.data2)
t.data3
str(t.data3)
t.data3 <- t.data
for (i in 1:4) {
t.data3[, i] <- as.factor(t.data3[, i])
}
rm(i)
str(t.data3)
t.data3 <- t.data2
str(t.data3)
str(t.data3[, 1])
t.data3$v1_t1
t.data3[, 1]
as.factor(t.data3[, 1])
t.data3[, 1] <- as.factor(t.data3[, 1])
t.data3[, 1]
t.data3[, 2] <- as.factor(t.data3[, 2])
t.data3[, 3] <- as.factor(t.data3[, 3])
t.data3[, 4] <- as.factor(t.data3[, 4])
str(t.data3)
bnlearn::score(t.net2, t.data3, type = 'bic')
t.net2
ms2
ms2 <- "[v1_t1][v2_t1][v3_t1][v1_t2]"
t.net2 <- bnlearn::model2network(ms2)
bnlearn::score(t.net2, t.data3, type = 'bic')
ms3 <- "[v1_t1][v2_t1][v3_t1][v1_t2][v1_t2|v1_t1]"
t.net3 <- bnlearn::model2network(ms3)
bnlearn::score(t.net3, t.data3, type = 'bic')
ms3
ms3 <- "[v1_t1][v2_t1][v3_t1][v1_t2|v1_t1]"
t.net3 <- bnlearn::model2network(ms3)
bnlearn::score(t.net3, t.data3, type = 'bic')
ms4 <- "[v1_t1][v2_t1][v3_t1][v1_t2|v1_t1:v3_t1]"
t.net4 <- bnlearn::model2network(ms4)
bnlearn::score(t.net4, t.data3, type = 'bic')
bnlearn::data.type(learning.test)
.Call(call_data_type, 'bnlearn', learning.test)
.Call('call_data_type', 'bnlearn', learning.test)
.Call('call_data_type', 'bnlearn', data = learning.test)
.Call('call_data_type', 'bnlearn')
.Call('call_data_type', data = learning.test)
.Call('call_data_type', data = t.data3)
data("swiss")
dim(swiss)
str(swiss)
lm1 <- lm(Fertility ~ . , data = swiss)
lm1
stats::BIC(ms)
stats::BIC(t.net)
stats::BIC(t.net, data = learning.test)
t.net
t.net2
stats::BIC(t.net2, data = t.data)
stats::BIC(t.net2, data = t.data2)
stats::BIC(t.net2, data = t.data3)
bnlearn::score(t.net2, data = t.data3, type = 'bic')
t.net3
stats::BIC(t.net3, data = t.data3)
bnlearn::score(t.net3, data = t.data3, type = 'bic')
stats::BIC(t.net4, data = t.data3)
bnlearn::score(t.net4, data = t.data3, type = 'bic')
bnlearn::score(t.net4, data = t.data, type = 'bic')
bnlearn::score(t.net4, data = t.data2, type = 'bic')
stats::BIC(t.net4, data = t.data)
stats::BIC(t.net4, data = t.data2)
stats::BIC(t.net4, data = t.data3)
t.data3
t.data3[1, 1] <- factor(1)
t.data3
stats::BIC(t.net4, data = t.data3)
t.data3[, 1] <- as.factor(t.data3[, 1])
stats::BIC(t.net4, data = t.data3)
str(t.data3)
t.data[1, 1] <- 1
t.data
t.data <- as.data.frame(t.data)
t.data <- as.matrix(t.data)
t.data
str(t.data)
t.data2 <- as.data.frame(t.data)
str(t.data)
str(t.data2)
for (i in 1:4) {
}
rm(i)
t.data3 <- t.data2
t.data3
for (i in 1:4) {
t.data3[, i] <- as.factor(t.data3[, i])
}
rm(i)
str(t.data3)
bnlearn::score(t.net2, data = t.data3, type = 'bic')
stats::BIC(t.net2, data = t.data3)
t.net2
ms2
stats::logLik(t.net2)
stats::logLik(t.net2, data = t.data3)
bnlean::logLik(t.net2, data = t.data3)
library(bnlearn)
bnlean::logLik(t.net2, data = t.data3)
bnlearn::logLik.bn(t.net2, data = t.data3)
bnlearn::logLik(t.net2, data = t.data3)
packrat::status()
packrat::status()
stats::BIC(t.net2, data = t.data3)
t.net2
bnlearn::score(t.net2, data = t.data3, type = 'bic')
t.data
t.data.single <- t.data
t.data[1, 1] <- 1
t.data[1, 1] <- 2
t.data
t.data2 <- as.data.frame(t.data)
t.data2.single <- as.data.frame(t.data.single)
t.data3 <- t.data2
t.data3.single <- t.data2.single
for (i in 1:4) {t.data3[, i] <- as.factor(t.data3[, i])}
for (i in 1:4) {t.data3.single[, i] <- as.factor(t.data3.single[, i])}
rm(i)
bnlearn::score(t.net2, data = t.data3, type = 'bic')
bnlearn::score(t.net2, data = t.data3, type = 'loglik')
log(4)
log(4)/2
(-9.52061 + 12.2932) / 0.6931472
t.net2
q()
q()
t.net4
t.net
t.net2
t.net2$arcs
t.net3$arcs
t.net4$arcs
save.image()
packrat::status()
packrat::on()
packrat::bundle()
packrat::bundle()
packrat::status()
packrat::bundle()
save.image()
packrat::status()
q()
time(print('nothin'))
system.time(print('nothing'))
system.time()
save.image()
q()
library(parallel)
packrat::status()
save.image()
q()
packrat::status()
packrat::on()
install.packages('EDISON')
http_proxy=http://202.141.80.80:3128
http_proxy=http://202.141.80.80:3128/
http_proxy='http://202.141.80.80:3128
''
)
'
http_proxy='http://202.141.80.80:3128'
http_proxy_user='p.saptarshi:ItIhbp23'
install.packages('EDISON')
https_proxy='http://202.141.80.80:3128'
https_proxy_user='p.saptarshi:ItIhbp23'
install.packages('EDISON')
http_proxy=http://202.141.80.80:3128
Sys.setenv(http_proxy="http://p.saptarshi:ItIhbp23@202.141.80.80:3128")
install.packages('EDISON')
Sys.setenv(https_proxy="http://p.saptarshi:ItIhbp23@202.141.80.80:3128")
install.packages('EDISON')
library(EDISON)
packrat::status()
packrat::snapshot()
packrat::status()
packageVersion('EDISON')
save.image()
q()
library(packrat)
packrat::bundle()
q()
setwd('C:\GitHub\TGS-Lite')
setwd('C://GitHub//TGS-Lite')
ls()
q()
source('C:/GitHub/TGS-Lite/learn_mi_net_struct.R')
getwd()
setwd('../TGS-2')
library(packrat)
packrat::init()
packrat::on()
packrat::status()
packrat::init()
warnings()
packrat::status()
packrat::init()
library(devtools)
packrat::init()
install.packages('packrat')
install.packages("packrat")
getwd()
packrat::init()
packageVersion(packrat)
packageVersion('packrat)
''
)
)
()
'
packageVersion('packrat')
install.packages('devtools')
library(devtools)
library(packrat)
packrat::init()
devtools::install_github("rstudio/packrat")
devtools::install_github('rstudio/packrat')
q()
R::home()
home()
R.home()
q()
setwd('../TGS-2')
library(packrat)
packrat::status()
packrat::restore()
packrat::status()
packrat::restore()
packrat::status()
packrat::on()
packrat::restore()
install.packages('bnstruct')
packrat::status()
install.packages('devtools')
packrat::status()
packrat::snapshot()
install.packages('rcmdcheck')
packrat::status()
packrat::snapshot()
packrat::status()
packrat::snapshot()
install.packages('gRain')
packrat::status()
install.packages('ggm')
packrat::snapshot()
packrat::snapshot(ignore.stale = TRUE)
packrat::status()
library(rjson)
install.packages('rjson')
packrat::status()
q()
setwd('../TGS-2')
packrat::on()
install.packages
install.packages('rjson', lib = "C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1")
.libPaths()
packrat::status()
install.packages('minet', lib = "C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minet", version = "3.8")
library(minet)
install.packages('BiocManager', lib = 'C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1')
?BiocManager::install
BiocManager::install("minet", lib = "C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1", version = "3.8")
BiocManager::install("minet", lib = "C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1", version = "3.8")
BiocManager::install("minet", lib = "C:/GitHub/TGS-2/packrat/lib/x86_64-w64-mingw32/3.5.1", version = "3.8")
packrat::status()
packrat::snapshot()
packrat::status()
setRepositories()
setRepositories()
packrat::snapshot()
q()
packrat::init()
packrat::on()
packrat::status()
install.packages('RBGL')
packrat::on()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RBGL", version = "3.8")
packrat::on()
packrat::status()
BiocManager::install("Rgraphviz", version = "3.8")
packrat::on()
packrat::status()
BiocManager::install("minet", version = "3.8")
packrat::on()
packrat::status()
packrat::snapshot()
packrat::status()
R.version()
R.Version()
q()
packrat::on()
.Platform$OS.type
getwd()
packrat::on()
packageVersion("bnstruct")
load('asset/output20190419202057/input.data.discr.RData')
dim(input.data.discr)
unique(input.data.discr[, 3])
unique(input.data.discr[1:21, 3])
unique(input.data.discr[22:43, 3])
unique(input.data.discr[22:42, 3])
unique(input.data.discr[43:63, 3])
unique(input.data.discr[64:84, 3])
unique(input.data.discr[1:21, 1])
unique(input.data.discr[1:21, 2])
unique(input.data.discr[1:21, 3])
unique(input.data.discr[1:21, 4])
unique(input.data.discr[22:42, 1])
unique(input.data.discr[22:42, 2])
unique(input.data.discr[22:42, 3])
unique(input.data.discr[22:42, 4])
unique(input.data.discr[1:21, 5])
unique(input.data.discr[1:21, 6])
unique(input.data.discr[1:21, 7])
unique(input.data.discr[1:21, 8])
unique(input.data.discr[1:21, 9])
unique(input.data.discr[1:21, 10])
unique(input.data.discr[22:42, 1])
unique(input.data.discr[22:42, 2])
unique(input.data.discr[22:42, 3])
unique(input.data.discr[22:42, 4])
unique(input.data.discr[22:42, 5])
unique(input.data.discr[22:42, 6])
unique(input.data.discr[22:42, 7])
unique(input.data.discr[22:42, 8])
unique(input.data.discr[22:42, 9])
unique(input.data.discr[22:42, 10])
unique(input.data.discr[43:63, 1])
unique(input.data.discr[43:63, 2])
unique(input.data.discr[43:63, 3])
unique(input.data.discr[43:63, 4])
unique(input.data.discr[43:63, 5])
unique(input.data.discr[43:63, 6])
unique(input.data.discr[43:63, 7])
unique(input.data.discr[43:63, 8])
unique(input.data.discr[43:63, 9])
unique(input.data.discr[43:63, 10])
unique(input.data.discr[64:84, 1])
unique(input.data.discr[64:84, 2])
unique(input.data.discr[64:84, 3])
unique(input.data.discr[64:84, 4])
unique(input.data.discr[64:84, 5])
unique(input.data.discr[64:84, 6])
unique(input.data.discr[64:84, 7])
unique(input.data.discr[64:84, 8])
unique(input.data.discr[64:84, 9])
unique(input.data.discr[64:84, 10])
print('a') print('b')
ls()
rm(input.data.discr)
load('asset/output20190430110106/mi.net.adj.matrix.list.RData')
dim(mi.net.adj.matrix.list)
length(mi.net.adj.matrix.list)
mi.net.adj.matrix.list[[1]]
ls()
rm(mi.net.adj.matrix.list)
packrat::on()
packrat::on()
packrat::on()
library(rjson)
packrat::on()
install.packages('rjson')
http_proxy="p.saptarshi:ItIhbp23@202.141.80.80:3128"
https_proxy="p.saptarshi:ItIhbp23@202.141.80.80:3128"
ftp_proxy="p.saptarshi:ItIhbp23@202.141.80.80:3128"
install.packages('rjson')
install.packages('rjson')
install.packages('rjson')
install.packages('rjson')
ftp_proxy="202.141.80.80:3128"
ftp_proxy_user="p.saptarshi:ItIhbp23"
install.packages('rjson')
install.packages('rjson')
install.packages('rjson')
http_proxy="202.141.80.80:3128"
http_proxy_user="p.saptarshi:ItIhbp23"
https_proxy="202.141.80.80:3128"
https_proxy_user="p.saptarshi:ItIhbp23"
install.packages('rjson')
install.packages('rjson')
install.packages('/packrat/src/rjson_0.2.20.tar.gz', repos = NULL, type = 'source')
install.packages(paste(getwd(), 'packrat/src/rjson_0.2.20.tar.gz', sep = '/'), repos = NULL, type = 'source')
install.packages('/home/cse/Downloads/rjson_0.2.20.tar.gz', repos = NULL, type = 'source')
packrat::status()
packrat::snapshot()
packrat::status()
packrat::restore()
packrat::status()
install.packages('MASS')
packrat::on()
packrat::status()
